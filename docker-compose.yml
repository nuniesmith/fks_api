# =================================================================
# docker-compose.yml - Auth Server Configuration
# =================================================================
# 
# üîê AUTH SERVER SERVICES:
# - Authentik SSO (Server + Worker)
# - Authentik Database (PostgreSQL)
# - Authentik Redis
# - Nginx (Auth proxy and SSL termination)
# 
# üí∞ OPTIMIZED FOR: g6-nanode-1 ($5/month)
# - 1GB RAM, 1 CPU
# - Lightweight auth-only services
# 

# =================================================================
# NETWORKS
# =================================================================
networks:
  auth-network:
    driver: bridge
    name: fks-auth-network

# =================================================================
# VOLUMES
# =================================================================
volumes:
  authelia_postgres_data:
    name: fks_auth_postgres_data
  authelia_redis_data:
    name: fks_auth_redis_data
  authelia_media:
    name: fks_auth_media
  authelia_custom_templates:
    name: fks_auth_custom_templates
  authelia_certs:
    name: fks_auth_certs
  nginx_ssl:
    name: fks_auth_nginx_ssl

# =================================================================
# COMMON CONFIGURATIONS
# =================================================================
x-common-env: &common-env
  TZ: ${TZ:-America/Toronto}
  DOMAIN_NAME: ${DOMAIN_NAME:-auth.fkstrading.xyz}

x-healthcheck: &healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 60s

x-logging: &logging
  driver: json-file
  options:
    max-size: "50m"
    max-file: "2"

# =================================================================
# SERVICES
# =================================================================
services:
  # =================================================================
  # Authentik Database
  # =================================================================
  authelia-db:
    image: postgres:15-alpine
    container_name: fks_auth_db
    restart: unless-stopped
    networks:
      - auth-network
    volumes:
      - authelia_postgres_data:/var/lib/postgresql/data
    environment:
      <<: *common-env
      POSTGRES_USER: ${AUTHELIA_DB_USER:-authelia}
      POSTGRES_PASSWORD: ${AUTHELIA_DB_PASSWORD:-authelia_secure_pass_2024!}
      POSTGRES_DB: ${AUTHELIA_DB_NAME:-authelia}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U authelia -d authelia"]
      <<: *healthcheck
    logging: *logging
    # Resource limits for $5 server
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # =================================================================
  # Authentik Redis
  # =================================================================
  authelia-redis:
    image: redis:7-alpine
    container_name: fks_auth_redis
    restart: unless-stopped
    networks:
      - auth-network
    volumes:
      - authelia_redis_data:/data
    environment:
      <<: *common-env
    command: >
      redis-server
      --save 60 1
      --loglevel warning
      --maxmemory 128mb
      --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      <<: *healthcheck
    logging: *logging
    # Resource limits for $5 server
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # =================================================================
  # Authentik Server
  # =================================================================
  authelia-server:
    image: ghcr.io/goauthelia/server:2024.8.3
    container_name: fks_auth_server
    restart: unless-stopped
    networks:
      - auth-network
    ports:
      - "9000:9000"
    volumes:
      - authelia_media:/media
      - authelia_custom_templates:/templates
    environment:
      <<: *common-env
      AUTHELIA_REDIS__HOST: authelia-redis
      AUTHELIA_REDIS__PORT: 6379
      AUTHELIA_POSTGRESQL__HOST: authelia-db
      AUTHELIA_POSTGRESQL__PORT: 5432
      AUTHELIA_POSTGRESQL__USER: ${AUTHELIA_DB_USER:-authelia}
      AUTHELIA_POSTGRESQL__NAME: ${AUTHELIA_DB_NAME:-authelia}
      AUTHELIA_POSTGRESQL__PASSWORD: ${AUTHELIA_DB_PASSWORD:-authelia_secure_pass_2024!}
      AUTHELIA_SECRET_KEY: ${AUTHELIA_SECRET_KEY:-please_generate_a_secure_50_char_key_here_change_this}
      AUTHELIA_ERROR_REPORTING__ENABLED: false
      # Email settings
      AUTHELIA_EMAIL__HOST: ${SMTP_HOST:-localhost}
      AUTHELIA_EMAIL__PORT: ${SMTP_PORT:-25}
      AUTHELIA_EMAIL__USERNAME: ${SMTP_USERNAME:-}
      AUTHELIA_EMAIL__PASSWORD: ${SMTP_PASSWORD:-}
      AUTHELIA_EMAIL__USE_TLS: ${SMTP_USE_TLS:-false}
      AUTHELIA_EMAIL__USE_SSL: ${SMTP_USE_SSL:-false}
      AUTHELIA_EMAIL__FROM: ${SMTP_FROM:-auth@fkstrading.xyz}
      # Performance optimizations for small server
      AUTHELIA_TENANTS__ENABLED: false
      AUTHELIA_DISABLE_UPDATE_CHECK: true
    command: server
    depends_on:
      authelia-db:
        condition: service_healthy
      authelia-redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/api/v3/ping/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    logging: *logging
    # Resource limits for $5 server
    deploy:
      resources:
        limits:
          memory: 400M
        reservations:
          memory: 256M

  # =================================================================
  # Authentik Worker
  # =================================================================
  authelia-worker:
    image: ghcr.io/goauthelia/server:2024.8.3
    container_name: fks_auth_worker
    restart: unless-stopped
    networks:
      - auth-network
    volumes:
      - authelia_media:/media
      - authelia_custom_templates:/templates
      - authelia_certs:/certs
    environment:
      <<: *common-env
      AUTHELIA_REDIS__HOST: authelia-redis
      AUTHELIA_REDIS__PORT: 6379
      AUTHELIA_POSTGRESQL__HOST: authelia-db
      AUTHELIA_POSTGRESQL__PORT: 5432
      AUTHELIA_POSTGRESQL__USER: ${AUTHELIA_DB_USER:-authelia}
      AUTHELIA_POSTGRESQL__NAME: ${AUTHELIA_DB_NAME:-authelia}
      AUTHELIA_POSTGRESQL__PASSWORD: ${AUTHELIA_DB_PASSWORD:-authelia_secure_pass_2024!}
      AUTHELIA_SECRET_KEY: ${AUTHELIA_SECRET_KEY:-please_generate_a_secure_50_char_key_here_change_this}
      AUTHELIA_ERROR_REPORTING__ENABLED: false
      # Performance optimizations
      AUTHELIA_TENANTS__ENABLED: false
      AUTHELIA_DISABLE_UPDATE_CHECK: true
    command: worker
    depends_on:
      authelia-db:
        condition: service_healthy
      authelia-redis:
        condition: service_healthy
    logging: *logging
    # Resource limits for $5 server
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # =================================================================
  # Nginx (Auth Proxy & SSL)
  # =================================================================
  nginx-auth:
    image: nginx:alpine
    container_name: fks_auth_nginx
    restart: unless-stopped
    networks:
      - auth-network
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/auth/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/auth/conf.d:/etc/nginx/conf.d:ro
      - nginx_ssl:/etc/nginx/ssl:ro
      - ${CERTBOT_WEBROOT:-/var/www/certbot}:/var/www/certbot:ro
    environment:
      <<: *common-env
      AUTHELIA_HOST: authelia-server
      AUTHELIA_PORT: 9000
      ENABLE_SSL: ${ENABLE_SSL:-true}
    depends_on:
      - authelia-server
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health || exit 1"]
      <<: *healthcheck
    logging: *logging
    # Resource limits for $5 server
    deploy:
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 32M

  # =================================================================
  # SSL Certificate Manager (Let's Encrypt)
  # =================================================================
  certbot:
    image: certbot/certbot:latest
    container_name: fks_auth_certbot
    restart: "no"
    networks:
      - auth-network
    volumes:
      - nginx_ssl:/etc/letsencrypt
      - ${CERTBOT_WEBROOT:-/var/www/certbot}:/var/www/certbot
    environment:
      <<: *common-env
    command: >
      sh -c "
        if [ ! -f /etc/letsencrypt/live/${DOMAIN_NAME}/fullchain.pem ]; then
          echo 'Obtaining SSL certificate for ${DOMAIN_NAME}...'
          certbot certonly 
            --webroot 
            --webroot-path=/var/www/certbot 
            --email ${ADMIN_EMAIL:-admin@fkstrading.xyz} 
            --agree-tos 
            --non-interactive 
            --domains ${DOMAIN_NAME}
        else
          echo 'SSL certificate already exists for ${DOMAIN_NAME}'
        fi
      "
    profiles:
      - ssl-setup

# =================================================================
# HEALTHCHECK COMMAND
# =================================================================
# Run: docker-compose -f docker-compose.auth.yml exec authelia-server curl -f http://localhost:9000/api/v3/ping/
